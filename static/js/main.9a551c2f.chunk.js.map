{"version":3,"sources":["quiz/Question.js","quiz/Story.js","quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Question","question","convertedAnswers","props","useState","error","setError","nemnem","Audio","process","wrongAnswer","play","console","log","window","setTimeout","decideClass","i","answers","map","answer","Row","Col","Button","onClick","index","onRightAnswer","className","variant","sort","Math","random","Container","xs","Image","src","image","fluid","roundedCircle","Story","text","onNext","Quiz","playbook","setIndex","nextPage","length","failed","episode","type","onWrongAnswer","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9a551c2f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../style/quiz/Question.scss\"\nimport { Container, Row, Col, Button, Image } from \"react-bootstrap\";\n\nexport default function Question({ ...props }) {\n\n    let [error, setError] = useState(false);\n\n    let question, convertedAnswers;\n\n    let nemnem  = new Audio(process.env.PUBLIC_URL + \"/nemnem.mp3\")\n\n    const wrongAnswer = () => {\n        setError(true);\n        nemnem.play()\n        console.log(error);\n        window.setTimeout(() => {setError(false)}, 1000);\n    }\n\n    const giveAnswer = (index) => ((index === 0) ? () => window.setTimeout(props.onRightAnswer, 500) : wrongAnswer);\n\n    const decideClass = (i) => (\"answer_\" + (i === 0 ? \"right\" : \"wrong\"));\n\n\n    const convertAnswer = (answer, i) => (\n        <Row>\n            <Col>\n                <Button onClick={giveAnswer(i)} className={\"answer \" + decideClass(i)} variant=\"light\">\n                    {answer}\n                </Button>\n            </Col>\n        </Row>\n    );\n\n\n    if (question !== props.question) {\n        question = props.question;\n        convertedAnswers = props.answers.map(convertAnswer).sort(() => (Math.random()) - 0.5);\n    }\n\n    return (\n        <Container className=\"Question\">\n            <Row>\n                <Col xs={6}>\n                    <Image src={process.env.PUBLIC_URL + props.image} fluid roundedCircle className=\"question-image\"/>\n                    <p>{props.question}</p>\n                </Col>\n                <Col xs={6}>\n                    {convertedAnswers}\n                </Col>\n            </Row>\n            <Image src={process.env.PUBLIC_URL + \"/hanna.png\"} fluid className={[\"error\", error ? \"active\" : \"inactive\"]}/>\n        </Container>\n    );\n}","import React from 'react';\nimport { Container, Row, Col, Button, Image } from 'react-bootstrap';\nimport \"../style/quiz/Story.scss\"\n\n\nexport default function Story({text, image, onNext}) {\n\n    if (!!text)\n    return (\n        <Container className=\"Question\">\n            <Row className=\"storyText\">\n                <Col xs={12}>\n                    <p>{text}</p>\n                </Col>\n            </Row>\n            <Row className=\"storyButton\">\n                <Button onClick={onNext} variant=\"light\">Kezdj√ºk!</Button>\n            </Row>\n        </Container>\n    )\n\n    return (\n        <Container className=\"Question\">\n            <Row className=\"storyText\">\n                <Col xs={12}>\n                    <Image src={process.env.PUBLIC_URL + image} fluid/>\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import React, { useState } from \"react\";\nimport Question from \"./Question\";\nimport Story from \"./Story\";\n\nexport default function Quiz({playbook}) {\n    let [index, setIndex] = useState(0);\n    let [fail, setFail] = useState(0);\n\n    const nextPage = () => { if (index + 1 < playbook.length) setIndex(index + 1) };\n    const failed = () => {};\n\n    const storyToComponent = (episode) => {\n        if (episode.type === \"story\") {\n            return <Story onNext={nextPage} {...episode}/>\n        }\n\n        return <Question onRightAnswer={nextPage} onWrongAnswer={failed} {...episode}/>\n    }\n\n    const actualEpisode = playbook.map(storyToComponent)[index];\n\n    return actualEpisode;\n\n}","import React from 'react';\nimport playbook from './playbook'\nimport { Container, Image, Row, Col } from 'react-bootstrap';\nimport Quiz from './quiz/Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n      <Row>\n          <Col xs={12}>\n            <Image src={process.env.PUBLIC_URL + \"/szulinap.png\"} fluid />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <Quiz playbook={playbook}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/App.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}